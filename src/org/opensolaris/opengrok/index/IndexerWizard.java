/*
 * IndexerWizard.java
 *
 * Created on January 26, 2006, 10:15 AM
 */

package org.opensolaris.opengrok.index;

import java.awt.Dimension;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.prefs.Preferences;
import javax.swing.JOptionPane;
import javax.swing.ProgressMonitor;
import javax.swing.UIManager;
import javax.swing.filechooser.FileFilter;
import org.opensolaris.opengrok.configuration.RuntimeEnvironment;

/**
 *
 * @author  cb117521
 */
public class IndexerWizard extends javax.swing.JFrame {
    private File dataRoot = null;
    private File srcRoot = null;
    private String exubCtags = null;
    private Index idx;
    private IndexThread ithread;
    final StatusPrinter out = new StatusPrinter();
    final StatusPrinter err = new StatusPrinter();
    private boolean idxDone;
    /** Creates new form IndexerWizard */
    public IndexerWizard(String dataRootPath) {
        if(dataRootPath != null) {
            dataRoot = new File(dataRootPath);
        } else {
            dataRoot = new File(System.getProperty("user.home") + File.separatorChar + "opengrok_data");
        }
        Preferences prefs = Preferences.userNodeForPackage(Indexer.class);
        String ctagsPath = prefs.get("ctags", null);
        initSrcRoot();
        initComponents();
        setUrlPrefix(webappContext.getText());
        if(Index.setExuberantCtags(ctagsPath)) {
            exubCtags = RuntimeEnvironment.getInstance().getCtags();
            if(exubCtags != null)
                ctagsText.setText(exubCtags);
        }
        bcancel.setEnabled(false);
        StatusPanel.setVisible(false);
    }
    
    private void initSrcRoot() {
        if(dataRoot != null && dataRoot.exists()) {
            File srcConfig = new File(dataRoot, "SRC_ROOT");
            if(srcConfig.exists()) {
                try {
                    BufferedReader sr = new BufferedReader(new FileReader(srcConfig));
                    String srcRootPath = sr.readLine();
                    sr.close();
                    srcRoot = new File(srcRootPath);
                } catch (IOException e) {
                }
            }
        }
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        DataRootChooser = new javax.swing.JFileChooser();
        SrcRootChooser = new javax.swing.JFileChooser();
        ctagsChooser = new javax.swing.JFileChooser();
        opts = new javax.swing.JDialog();
        opts.setLocationRelativeTo(this);
        jPanel4 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        ctagsText = new javax.swing.JTextField();
        jButton7 = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        economical = new javax.swing.JCheckBox();
        jTextPane3 = new javax.swing.JTextPane();
        jLabel8 = new javax.swing.JLabel();
        webappContext = new javax.swing.JTextField();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        DataRootPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        dataRootText = new javax.swing.JTextField();
        bchoosedata = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        SrcRootPanel = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        srcRootText = new javax.swing.JTextField();
        bchoosesrc = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        bstart = new javax.swing.JButton();
        StatusPanel = new javax.swing.JPanel();
        iprogress = new javax.swing.JProgressBar();
        warnStatus = new javax.swing.JLabel();
        bcancel = new javax.swing.JButton();
        runStatus = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        warnStatus1 = new javax.swing.JLabel();
        badv = new javax.swing.JButton();
        bclose = new javax.swing.JButton();

        DataRootChooser.setFileSelectionMode(javax.swing.JFileChooser.DIRECTORIES_ONLY);
        DataRootChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DataRootChooserActionPerformed(evt);
            }
        });

        SrcRootChooser.setFileSelectionMode(javax.swing.JFileChooser.DIRECTORIES_ONLY);
        SrcRootChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SrcRootChooserActionPerformed(evt);
            }
        });

        ctagsChooser.setDialogTitle("Select Exuberant Ctags");
        ctagsChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ctagsChooserActionPerformed(evt);
            }
        });

        opts.setModal(true);
        opts.setName("Advanced Options");
        jPanel4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        jPanel4.setPreferredSize(new java.awt.Dimension(500, 60));
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel7.setText("Ctags");

        ctagsText.setText(exubCtags);

        jButton7.setText("Browse ...");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel4Layout = new org.jdesktop.layout.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel7, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 52, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(ctagsText, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 284, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jButton7)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel7)
                    .add(jButton7)
                    .add(ctagsText, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 26, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(19, Short.MAX_VALUE))
        );

        jPanel5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        economical.setSelected(Preferences.userNodeForPackage(Indexer.class).getBoolean("xref", true)
        );
        economical.setText("For Online Source Searching Browsing");
        economical.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        economical.setMargin(new java.awt.Insets(0, 0, 0, 0));
        economical.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                economicalActionPerformed(evt);
            }
        });

        jTextPane3.setBackground(java.awt.SystemColor.text);
        jTextPane3.setBorder(null);
        jTextPane3.setText("It creates HTML cross-reference files make it faster to browse code online.\nHowever they will take up space. If you wish to use OpenGrok only for local code searching, then uncheck this option. It will also create a webapp that you deploy to be able to browse and search the source!");

        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel8.setText("webapp context name");

        webappContext.setText(Preferences.userNodeForPackage(IndexerWizard.class).get("context", "/source"));
        webappContext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                webappContextActionPerformed(evt);
            }
        });
        webappContext.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                webappContextKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                webappContextKeyTyped(evt);
            }
        });

        jButton8.setText("Generate");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel5Layout = new org.jdesktop.layout.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel5Layout.createSequentialGroup()
                .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel5Layout.createSequentialGroup()
                        .add(29, 29, 29)
                        .add(jLabel8)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(webappContext, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 139, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jButton8))
                    .add(jPanel5Layout.createSequentialGroup()
                        .addContainerGap()
                        .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jPanel5Layout.createSequentialGroup()
                                .add(17, 17, 17)
                                .add(jTextPane3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 427, Short.MAX_VALUE))
                            .add(economical))))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .add(economical)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jTextPane3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 76, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel8)
                    .add(jButton8)
                    .add(webappContext, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 26, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jButton9.setText("Close");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout optsLayout = new org.jdesktop.layout.GroupLayout(opts.getContentPane());
        opts.getContentPane().setLayout(optsLayout);
        optsLayout.setHorizontalGroup(
            optsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, optsLayout.createSequentialGroup()
                .add(optsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, optsLayout.createSequentialGroup()
                        .add(10, 10, 10)
                        .add(jPanel5, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .add(org.jdesktop.layout.GroupLayout.LEADING, optsLayout.createSequentialGroup()
                        .add(10, 10, 10)
                        .add(jPanel4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 470, Short.MAX_VALUE))
                    .add(org.jdesktop.layout.GroupLayout.LEADING, optsLayout.createSequentialGroup()
                        .add(211, 211, 211)
                        .add(jButton9)))
                .addContainerGap())
        );
        optsLayout.setVerticalGroup(
            optsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(optsLayout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(10, 10, 10)
                .add(jPanel5, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jButton9)
                .addContainerGap())
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("OpenGrok Index");
        DataRootPanel.setBackground(new java.awt.Color(204, 255, 204));
        jLabel1.setText("Search index data directory");

        dataRootText.setText(dataRoot != null ? dataRoot.getPath() : ""
        );
        dataRootText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dataRootTextActionPerformed(evt);
            }
        });

        bchoosedata.setText("Browse ...");
        bchoosedata.setToolTipText("Select Data directory");
        bchoosedata.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bchoosedataActionPerformed(evt);
            }
        });

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/opensolaris/opengrok/index/step1.png")));

        org.jdesktop.layout.GroupLayout DataRootPanelLayout = new org.jdesktop.layout.GroupLayout(DataRootPanel);
        DataRootPanel.setLayout(DataRootPanelLayout);
        DataRootPanelLayout.setHorizontalGroup(
            DataRootPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(DataRootPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 96, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(DataRootPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel1)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, DataRootPanelLayout.createSequentialGroup()
                        .add(dataRootText, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 319, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(bchoosedata, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 90, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        DataRootPanelLayout.setVerticalGroup(
            DataRootPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(DataRootPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(DataRootPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(DataRootPanelLayout.createSequentialGroup()
                        .add(jLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 17, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(DataRootPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(dataRootText, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 26, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(bchoosedata)))
                    .add(jLabel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 61, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        SrcRootPanel.setBackground(new java.awt.Color(204, 255, 204));
        SrcRootPanel.setEnabled(false);
        jLabel5.setText("Soure tree directory");

        srcRootText.setText(srcRoot != null ? srcRoot.getPath() : ""
        );

        bchoosesrc.setText("Browse ...");
        bchoosesrc.setToolTipText("Select the source directory");
        bchoosesrc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bchoosesrcActionPerformed(evt);
            }
        });

        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/opensolaris/opengrok/index/step2.png")));

        org.jdesktop.layout.GroupLayout SrcRootPanelLayout = new org.jdesktop.layout.GroupLayout(SrcRootPanel);
        SrcRootPanel.setLayout(SrcRootPanelLayout);
        SrcRootPanelLayout.setHorizontalGroup(
            SrcRootPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(SrcRootPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel6)
                .add(12, 12, 12)
                .add(SrcRootPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel5)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, SrcRootPanelLayout.createSequentialGroup()
                        .add(srcRootText, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 314, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(bchoosesrc)))
                .addContainerGap())
        );
        SrcRootPanelLayout.setVerticalGroup(
            SrcRootPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(SrcRootPanelLayout.createSequentialGroup()
                .add(12, 12, 12)
                .add(SrcRootPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(jLabel6)
                    .add(SrcRootPanelLayout.createSequentialGroup()
                        .add(jLabel5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 17, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(SrcRootPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(bchoosesrc)
                            .add(srcRootText, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 26, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        bstart.setText("Update");
        bstart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bstartActionPerformed(evt);
            }
        });

        StatusPanel.setBackground(new java.awt.Color(204, 255, 204));
        iprogress.setIndeterminate(true);

        warnStatus.setFont(new java.awt.Font("Dialog", 0, 12));
        warnStatus.setForeground(new java.awt.Color(102, 102, 102));
        warnStatus.setText("Status");

        bcancel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/opensolaris/opengrok/index/stock_stop.png")));
        bcancel.setToolTipText("Stop Indexing");
        bcancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bcancelActionPerformed(evt);
            }
        });

        runStatus.setForeground(new java.awt.Color(0, 153, 51));
        runStatus.setText("|");

        jLabel9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/opensolaris/opengrok/index/step3.png")));

        warnStatus1.setForeground(new java.awt.Color(0, 0, 0));
        warnStatus1.setText("Generating Search Index.. Please wait or have a cup of coffee!");

        org.jdesktop.layout.GroupLayout StatusPanelLayout = new org.jdesktop.layout.GroupLayout(StatusPanel);
        StatusPanel.setLayout(StatusPanelLayout);
        StatusPanelLayout.setHorizontalGroup(
            StatusPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(StatusPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(StatusPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(warnStatus1)
                    .add(StatusPanelLayout.createSequentialGroup()
                        .add(jLabel9)
                        .add(18, 18, 18)
                        .add(StatusPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(warnStatus, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 347, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(runStatus, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 365, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(iprogress, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 373, Short.MAX_VALUE))))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(bcancel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 72, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        StatusPanelLayout.setVerticalGroup(
            StatusPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(StatusPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(StatusPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(bcancel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 83, Short.MAX_VALUE)
                    .add(StatusPanelLayout.createSequentialGroup()
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(warnStatus1)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(StatusPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(StatusPanelLayout.createSequentialGroup()
                                .add(runStatus)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(iprogress, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 14, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(warnStatus))
                            .add(jLabel9))))
                .addContainerGap())
        );

        badv.setText("Advanced Options");
        badv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                badvActionPerformed(evt);
            }
        });

        bclose.setText("Close");
        bclose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bcloseActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(StatusPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .add(layout.createSequentialGroup()
                        .add(badv, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 149, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 200, Short.MAX_VALUE)
                        .add(bstart, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 79, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(17, 17, 17)
                        .add(bclose, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 81, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(33, 33, 33))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, SrcRootPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(DataRootPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(DataRootPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(SrcRootPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(StatusPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 14, Short.MAX_VALUE)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(badv)
                    .add(bstart)
                    .add(bclose))
                .addContainerGap())
        );
        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void webappContextKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_webappContextKeyReleased
        Preferences prefs = Preferences.userNodeForPackage(IndexerWizard.class);
        String webapp = webappContext.getText();
        String urlPrefix = null;
        if(webapp.startsWith("/") || webapp.startsWith("http")) {
        } else {
            webapp = "/" + webapp;
        }
        if(webapp.endsWith("/")) {
            urlPrefix = webapp + "s?";
        } else {
            urlPrefix = webapp + "/s?";
        }
        if(urlPrefix != null) {
            System.setProperty("urlPrefix", webappContext.getText());
            prefs.put("context", webapp);
        }
        try{
            prefs.sync();
        } catch (Exception e) {}
       // System.err.println("CHanged:" + webapp);
    }//GEN-LAST:event_webappContextKeyReleased
    
    private void webappContextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_webappContextActionPerformed
        webappContextKeyReleased(null);
    }//GEN-LAST:event_webappContextActionPerformed
    
    private void webappContextKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_webappContextKeyTyped
        
    }//GEN-LAST:event_webappContextKeyTyped
    
    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
// TODO add your handling code here:
    }//GEN-LAST:event_jButton8ActionPerformed
    
    private void bcloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bcloseActionPerformed
        bcancelActionPerformed(evt);
        this.setVisible(false);
        this.dispose();
    }//GEN-LAST:event_bcloseActionPerformed
    
    private void bcancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bcancelActionPerformed
        if(ithread != null && ithread.isAlive()){
            try {
                ithread.interrupt();
                idx.cancel();
            } catch (Exception e) {
                System.err.println("Cancelled" + e);
            }
            runStatus.setText("");
            warnStatus.setText("");
            iprogress.setIndeterminate(false);
            //StatusPanel.setVisible(false);
            bstart.setEnabled(true);
            badv.setEnabled(true);
        }
//        this.setVisible(false);
//        transferFocusBackward();
    }//GEN-LAST:event_bcancelActionPerformed
    
    private void economicalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_economicalActionPerformed
        Preferences prefs = Preferences.userNodeForPackage(IndexerWizard.class);
        prefs.putBoolean("xref", economical.isSelected());
        try{
            prefs.flush();
        } catch (Exception e) {}
    }//GEN-LAST:event_economicalActionPerformed
    
    private void ctagsChooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ctagsChooserActionPerformed
// TODO add your handling code here:
    }//GEN-LAST:event_ctagsChooserActionPerformed
    
    private class IndexThread extends Thread {
        public synchronized void run() {
            bstart.setEnabled(false);
            badv.setEnabled(false);
            bcancel.setEnabled(true);
            idxDone = false;
            try{
                // System.err.println("Running indexer");
                idx.runIndexer(dataRoot, srcRoot, new ArrayList<String>(), !economical.isSelected());
                warnStatus.setText("");
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Error: " + e.getLocalizedMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                try {
                    idx.cancel();
                } catch (Exception en) {}
                warnStatus.setText("Error!");
            }
            idxDone = true;
            runStatus.setText(out.getStatus());
            iprogress.setIndeterminate(false);
            iprogress.setValue(100);
            bcancel.setEnabled(false);
            bstart.setEnabled(true);
            badv.setEnabled(true);
        }
    };
    
    private void bstartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bstartActionPerformed
        if (!Index.setExuberantCtags(ctagsText.getText())) {
            JOptionPane.showMessageDialog(this, "Error: " + ctagsText.getText() + "Does not look like a Exuberant Ctags!\nPlease select the path to Exuberant Ctags in Advanced Options", "Error", JOptionPane.ERROR_MESSAGE);
            opts.setSize(new Dimension(530,420));
            opts.setVisible(true);
            return;
        } else {
            // save the ctags that worked for us!
            Preferences prefs = Preferences.userNodeForPackage(IndexerWizard.class);
            if(prefs.get("ctags","") != ctagsText.getText())
                prefs.put("ctags", ctagsText.getText());
            try{
                prefs.flush();
            } catch(Exception e) {}
        }
        if(canstart()) {
            iprogress.setIndeterminate(true);
            StatusPanel.setVisible(true);
            idx = new Index(out, err);
            ithread = new IndexThread();
            Thread progt = new Thread() {
                public synchronized void run() {
                    while(ithread.isAlive()) {
                        runStatus.setText(out.getStatus());
                        warnStatus.setText(err.getStatus());
                        try {
                            Thread.sleep(110);
                        } catch (InterruptedException ex) {
                            ex.printStackTrace();
                        }
                    }
                    if(idxDone == false) {
                        try {
                            idx.cancel();
                        } catch (Exception en) {}
                        runStatus.setText("Interrupted!");
                        iprogress.setIndeterminate(false);
                        iprogress.setValue(100);
                        bcancel.setEnabled(false);
                        bstart.setEnabled(true);
                        badv.setEnabled(true);
                    }
                }
            };
            ithread.start();
            progt.start();
        }
    }//GEN-LAST:event_bstartActionPerformed
            private void dataRootTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dataRootTextActionPerformed
                if(dataRootText.getText() != null && !"".equals(dataRootText.getText())) {
                    dataRoot = new File(dataRootText.getText());
                    if(dataRoot.exists()) {
                        if(srcRoot == null)
                            initSrcRoot();
                    } else {
                        try {
                            dataRoot.mkdirs();
                        } catch (Exception e) {
                            JOptionPane.showMessageDialog(this, "Error: " + dataRoot.getName() + e.getLocalizedMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                            return;
                        }
                    }
                    bstart.setEnabled(canstart());
                }
    }//GEN-LAST:event_dataRootTextActionPerformed
            
    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        opts.setVisible(false);
    }//GEN-LAST:event_jButton9ActionPerformed
    
    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        ctagsChooser.showDialog(opts, "Exuberant Ctags");
        if(ctagsChooser.getSelectedFile() != null) {
            String inputCtags = ctagsChooser.getSelectedFile().getPath();
            if(Index.setExuberantCtags(inputCtags)) {
                ctagsText.setText(RuntimeEnvironment.getInstance().getCtags());
            } else {
                JOptionPane.showMessageDialog(opts, "Error: " + inputCtags + " does not look like Exuberant Ctag!", "Error", JOptionPane.ERROR_MESSAGE);
                ctagsText.setText("");
            }
        }
    }//GEN-LAST:event_jButton7ActionPerformed
    
    private void badvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_badvActionPerformed
        opts.setSize(new Dimension(530,420));
        opts.setVisible(true);
    }//GEN-LAST:event_badvActionPerformed
    
    private void bchoosesrcActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bchoosesrcActionPerformed
        SrcRootChooser.showDialog(this, "Select SrcRoot");
        srcRoot=SrcRootChooser.getSelectedFile();
        if(srcRoot != null) {
            srcRootText.setText(SrcRootChooser.getSelectedFile().getPath());
            bstart.setEnabled(canstart());
        }
    }//GEN-LAST:event_bchoosesrcActionPerformed
    
    private void bchoosedataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bchoosedataActionPerformed
        DataRootChooser.showDialog(this, "Select DataRoot");
        dataRoot=DataRootChooser.getSelectedFile();
        if(dataRoot != null) {
            dataRootText.setText(DataRootChooser.getSelectedFile().getPath());
            SrcRootPanel.setVisible(true);
            if(dataRoot.exists()) {
                if(srcRoot != null)
                    initSrcRoot();
            } else {
                try {
                    dataRoot.mkdirs();
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(this, "Error: " + dataRoot.getName() + e.getLocalizedMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
            }
            bstart.setEnabled(canstart());
        }
    }//GEN-LAST:event_bchoosedataActionPerformed
    
    private void SrcRootChooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SrcRootChooserActionPerformed
// TODO add your handling code here:
    }//GEN-LAST:event_SrcRootChooserActionPerformed
    
    private void DataRootChooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DataRootChooserActionPerformed
// TODO add your handling code here:
    }//GEN-LAST:event_DataRootChooserActionPerformed
    
    private boolean canstart(){
        String d = dataRootText.getText();
        if(d != null && !"".equals(d)){
            dataRoot=new File(d);
            if(dataRoot.exists()) {
                if(!dataRoot.isDirectory()) {
                    JOptionPane.showMessageDialog(this, "Error: " + dataRoot.getName() + " is a file", "Error", JOptionPane.ERROR_MESSAGE);
                    return false;
                }
                if(!dataRoot.canWrite()) {
                    JOptionPane.showMessageDialog(this, "Error: " + dataRoot.getName() + " is a not writable", "Error", JOptionPane.ERROR_MESSAGE);
                    return false;
                }
            }
        } else {
            return false;
        }
        String s = srcRootText.getText();
        if(s != null && !"".equals(s)){
            srcRoot = new File(s);
            if(!srcRoot.exists()) {
                JOptionPane.showMessageDialog(this, "Error: " + srcRoot.getName() + " does not exist! Choose a correct source tree", "Error", JOptionPane.ERROR_MESSAGE);
                return false;
            }
            if(!srcRoot.canRead()) {
                JOptionPane.showMessageDialog(this, "Error: Could not read " + srcRoot.getName() + "!", "Error", JOptionPane.ERROR_MESSAGE);
                return false;
            }
        } else {
            JOptionPane.showMessageDialog(this, "Error: Select a source root !", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        return true;
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new IndexerWizard(null).setVisible(true);
            }
        });
    }
    
    /**
     * Get the selected DataRoot
     * @return the current selected data root
     */
    public String getDataRoot() {
        return dataRootText.getText().trim();
    }
    
    private void setUrlPrefix(String string) {
        String urlPrefix = "/source/s?";
        try{
            if (string.endsWith("/")) {
                urlPrefix = string + "s?";
            } else {
                urlPrefix = string + "/s?";
            }
        } catch (Exception e) {
        }
        System.setProperty("urlPrefix", urlPrefix);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFileChooser DataRootChooser;
    private javax.swing.JPanel DataRootPanel;
    private javax.swing.JFileChooser SrcRootChooser;
    private javax.swing.JPanel SrcRootPanel;
    private javax.swing.JPanel StatusPanel;
    private javax.swing.JButton badv;
    private javax.swing.JButton bcancel;
    private javax.swing.JButton bchoosedata;
    private javax.swing.JButton bchoosesrc;
    private javax.swing.JButton bclose;
    private javax.swing.JButton bstart;
    private javax.swing.JFileChooser ctagsChooser;
    private javax.swing.JTextField ctagsText;
    private javax.swing.JTextField dataRootText;
    private javax.swing.JCheckBox economical;
    private javax.swing.JProgressBar iprogress;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JTextPane jTextPane3;
    private javax.swing.JDialog opts;
    private javax.swing.JLabel runStatus;
    private javax.swing.JTextField srcRootText;
    private javax.swing.JLabel warnStatus;
    private javax.swing.JLabel warnStatus1;
    private javax.swing.JTextField webappContext;
    // End of variables declaration//GEN-END:variables
}
